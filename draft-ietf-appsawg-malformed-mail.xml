<?xml version="1.0" encoding="us-ascii"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<!-- $Id: draft-ietf-appsawg-malformed-mail.xml,v 1.13 2012/05/22 06:55:50 msk Exp $ -->

<rfc ipr="trust200902" category="info"
        docName="draft-ietf-appsawg-malformed-mail-03">

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc strict="no" ?>
<?rfc rfcedstyle="yes"?>
<?rfc subcompact="no"?>

<front>
	<title abbrev="Safe Mail Handling">
		Advice for Safe Handling of Malformed Messages
	</title>

	<author initials="M. S." surname="Kucherawy"
	        fullname="Murray S. Kucherawy">

		<address>
			<email>superuser@gmail.com</email>
		</address>
	</author>

<!-- MSK: GNS needs to add himself as co-author -->

	<date year="2012"/>

	<area>Applications</area>
	<workgroup>APPSAWG</workgroup>
	<keyword>MTA</keyword>
	<keyword>SMTP</keyword>

	<abstract>
		<t> The email ecosystem has long had a very permissive set of
		    common processing rules in place, despite increasingly
		    rigid standards governing its components, ostensibly to
		    improve the user experience.  The handling of these
		    come at some cost, and various components are faced with
		    decisions about whether or not to permit non-conforming
		    messages to continue toward their destinations unaltered,
		    adjust them to conform (possibly at the cost of losing
		    some of the original message), or outright rejecting
		    them. </t>

		<t> This document includes a collection of the best advice
		    available regarding a variety of common malformed mail
		    situations, to be used as implementation guidance.  It
		    must be emphasized, however, that the intent of this
		    document is not to standardize malformations or otherwise
		    encourage their proliferation.  The messages are
		    manifestly malformed, and the code and culture that
		    generates them needs to be fixed.  Therefore, these
		    messages should be rejected outright if at all possible.
		    Nevertheless, many malformed messages from otherwise
		    legitimate senders are in circulation and will be for
		    some time, and, unfortunately, commercial reality shows
		    that we cannot always simply reject or discard them.
		    Accordingly, this document presents alternatives for
		    dealing with them in ways that seem to do the least
		    additional harm until the infrastructure is tightened up
		    to match the standards. </t>
	</abstract>
</front>

<middle>
	<section anchor="intro" title="Introduction">
		<section anchor="for" title="The Purpose Of This Work">
			<t> The history of email standards, going back to
			    <xref target="RFC822"/> and beyond, contains a
			    fairly rigid evolution of specifications.  But
			    implementations within that culture have also
			    long had an undercurrent known formally as the
			    robustness principle, but also known informally
			    as Postel's Law: "Be conservative in what you do,
			    be liberal in what you accept from others." </t>

			<t> In general, this served the email ecosystem well
			    by allowing a few errors in implementations
			    without obstructing participation in the game.
			    The proverbial bar was set low.  However, as we
			    have evolved into the current era, some of these
			    lenient stances have begun to expose opportunities
			    that can be exploited by malefactors.  Various
			    email-based applications rely on strong
			    application of these standards for simple security
			    checks, while the very basic building blocks of
			    that infrastructure, intending to be robust, fail
			    utterly to assert those standards. </t>

			<t> This document presents some areas in which the more
			    lenient stances can provide vectors for attack,
			    and then presents the collected wisdom of numerous
			    applications in and around the email ecosystem for
			    dealing with them to mitigate their impact. </t>
		</section>

		<section anchor="not_for" title="Not The Purpose Of This Work">
			<t> It is important to understand that this work is
			    not an effort to endorse or standardize certain
			    common malformations.  The code and culture that
			    introduces such messages into the mail stream
			    needs to be repaired, as the security penalty now
			    being paid for this lax processing arguably 
			    outweighs the reduction in support costs to end
			    users who are not expected to understand the
			    standards.  However, the reality is that this
			    will not be fixed quickly. </t>

			<t> Given this, it is beneficial to provide
			    implementers with guidance about the safest or
			    most effective way to handle malformed messages
			    when they arrive, taking into consideration the
			    tradeoffs of the choices available especially
			    with respect to how various actors in the email
			    ecosystem respond to such messages in terms of
			    handling, parsing, or rendering to end users. </t>
		</section>

		<section anchor="gencons" title="General Considerations">
			<t> Many deviations from message format standards
			    are considered by some receivers to be
			    strong indications that the message is undesirable,
			    i.e., is spam or contains malware.  Such receivers
			    quickly decide that the best handling choice is
			    simply to reject or discard the message.  This
			    means malformations caused by innocent
			    misunderstandings or ignorance of proper syntax
			    can cause messages with no ill intent also to fail
			    to be delivered. </t>

			<t> Senders that want to ensure message delivery are
			    best advised to adhere strictly to the relevant
			    standards (including, but not limited to,
			    <xref target="MAIL"/>, <xref target="MIME"/>,
			    and <xref target="DKIM"/>), as well as observe
			    other industry best practices such as may be
			    published from time to time either by the IETF or
			    independently. </t>
		</section>
	</section>

	<section anchor="doc" title="Document Conventions">
		<section anchor="keywords" title="Key Words">
			<t> The key words "MUST", "MUST NOT", "REQUIRED",
			    "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
			    "RECOMMENDED", "MAY", and "OPTIONAL" in this
			    document are to be interpreted as described in
			    <xref target="KEYWORDS"/>.  However, they only
			    have that meaning in this document when they are
			    presented entirely in upper case. </t>
		</section>

		<section anchor="examples" title="Examples">
			<t> Examples of message content include a number
			    within braces at the end of each line.  These
			    are line numbers for use in subsequent discussion,
			    and are not actually part of the message content
			    presented in the example. </t>

			<t> Blank lines are not numbered in the examples. </t>
		</section>
	</section>

	<section anchor="background" title="Background">
		<t> The reader would benefit from reading
		    <xref target="EMAIL-ARCH"/> for some general background
		    about the overall email architecture.  Of particular
		    interest is the Internet Message Format, detailed in
		    <xref target="MAIL"/>.  Throughout this document, the
		    use of the term "messsage" should be assumed to mean
		    a block of text conforming to the Internet Message
		    Format. </t>
	</section>

	<section anchor="internal" title="Internal Representations">
		<t> Any agent handling a message could have one or two (or
		    more) distinct representations of a message it is handling.
		    One is an internal representation, such as a block of
		    storage used for the header and a block for the body.
		    These may be sorted, encoded, decoded, etc., as per the
		    needs of that particular module.  The other is the
		    representation that is output to the next agent in the
		    handling chain.  This might be identical to the version
		    that is input to the module, or it might have some changes
		    such as added or reordered header fields, body
		    modifications to remove malicious content, etc. </t>

		<t> In some cases, advice is provided only for internal
		    representations.  However, there is often occasion to
		    mandate changes to the output as well. </t>
	</section>

	<section anchor="constant" title="Invariate Content">
		<t> Experience has shown that it is beneficial to ensure
		    that, from the first analysis agent at ingress into the
		    destination Administrative Management Domain (ADMD; see
		    <xref target="EMAIL-ARCH"/>) to the agent that actually
		    affects delivery to the end user, the message each
		    agent sees is identical.  Absent this, it can be impossible
		    for different agents in the chain to make assertions
		    about the content that correlate. </t>

		<t> For example, suppose a handling agent records that a
		    message had some specific set of properties at ingress
		    to the ADMD, then permitted it to continue inbound.  Some
		    other agent alters the content for some reason.  The user,
		    on viewing the delivered content, reports the message as
		    abusive.  If the report is based on the set of properties
		    recorded at ingress, then the complaint effectively
		    references a message different from what the user saw,
		    which could render the complaint inactionable.  Similarly,
		    a message with properties that a filtering agent might use
		    to reject an abusive message could be allowed to reach
		    the user if an intermediate agent altered the message in
		    a manner that alters one of those properties, thwarting
		    detection of the abuse. </t>

		<t> Therefore, agents comprising an inbound message processing
		    environment SHOULD ensure that each agent sees the same
		    content, and the message reaches the end user unmodified.
		    An exception to this is content that is identitfied
		    as certainly harmful, such as some kind of malicious
		    executable software included in the message. </t>
	</section>

	<section anchor="msa" title="Mail Submission Agents">
		<t> Within the email context, the single most influential
		    component that can reduce the presence of malformed
		    items in the email system is the Mail Submission
		    Agent (MSA).  This is the component that is essentially
		    the interface between end users that create content and
		    the mail stream. </t>

		<t> The lax processing described earlier in the document
		    creates a high support and security cost overall.  Thus,
		    MSAs MUST evolve to become more strict about enforcement
		    of all relevant email standards, especially
		    <xref target="MAIL"/> and the <xref target="MIME"/>
		    family of documents. </t>

		<t> Relay Mail Transport Agents (MTAs) SHOULD also be more
		    strict; although preventing the dissemination of malformed
		    messages is desirable, the rejection of such mail already
		    in transit also has a support cost, namely the creation
		    of a <xref target="DSN"/> that many end users might not
		    understand. </t>
	</section>

	<section anchor="lines" title="Line Terminaton">
		<t> The only valid line separation sequence in messaging is
		    ASCII 0x0D ("carriage return", or CR) followed by ASCII
		    0x0A ("line feed", or LF), commonly referred to as CRLF.
		    Common UNIX user tools, however, typically only use LF
		    for line termination.  This means the protocol has to
		    convert LF to CRLF before transporting a message. </t>

		<t> Naive implementations can cause messages to be transmitted
		    with a mix of line terminations, such as LF everywhere
		    except CRLF only at the end of the message.  According
		    to <xref target="SMTP"/>, this means the entire message
		    actually exists on a single line. </t>

		<t> A "naked" CR or LF in a message has no reasonable
		    justification, and furthermore <xref target="MIME"/>
		    presents mechanisms for encoding content that actually
		    does need to contain such an unusual character
		    sequence. </t>

		<t> Thus, handling agents MUST treat naked CRs and LFs as
		    CRLFs when interpreting the message. </t>
	</section>

	<section anchor="header" title="Header Anomalies">
		<t> This section covers common syntactical and semantic
		    anomalies found in headers of messages, and presents
		    preferred mitigations. </t>

		<section anchor="obsolete"
		         title="Converting Obsolete and Invalid Syntaxes">
			<t> There are numerous cases of obsolete header
			    syntaxes that can be applied to confound
			    agents with variable processing.  This section
			    presents some examples of these.  Messages
			    including them SHOULD be rejected; where this
			    is not possible, RECOMMENDED internal
			    interpretations are provided. </t>

			<section anchor="hostaddr" title="Host-Address Syntax">
				<t> The following obsolete syntax:

				    <figure><artwork>
    To: &lt;@example.net:fran@example.com&gt;
				    </artwork></figure> </t>

				<t> should be interpreted as:

				    <figure><artwork>
    To: &lt;fran@example.com&gt;
				    </artwork></figure> </t>
			</section>

			<section anchor="angle"
			         title="Excessive Angle Brackets">
				<t> The following over-use of angle brackets, e.g.:

				    <figure><artwork>
    To: &lt;&lt;&lt;user2@example.org&gt;&gt;&gt;
				    </artwork></figure> </t>

				<t> should be interpreted as:

				    <figure><artwork>
    To: &lt;user2@example.org&gt;
				    </artwork></figure> </t>
			</section>

			<section anchor="angle2"
			         title="Unbalanced Angle Brackets">
				<t> The following use of unbalanced angle
				    brackets:

				    <figure><artwork>
    To: &lt;another@example.net
    To: second@example.org&gt;
				    </artwork></figure> </t>

				<t> should be interpreted as:

				    <figure><artwork>
    To: &lt;another@example.net&gt;
    To: second@example.org
				    </artwork></figure> </t>
			</section>

			<section anchor="parens"
			         title="Unbalanced Parentheses">
				<t> The following use of unbalanced
				    parentheses:

				    <figure><artwork>
    To: (Testing &lt;fran@example.com&gt;
    To: Testing) &lt;sam@example.com&gt;
				    </artwork></figure> </t>

				<t> should be interpreted as:

				    <figure><artwork>
    To: (Testing) &lt;fran@example.com&gt;
    To: "Testing)" &lt;sam@example.com&gt;
				    </artwork></figure> </t>
			</section>

			<section anchor="quotes" title="Unbalanced Quotes">
				<t> The following use of unbalanced
				    quotation marks:

				    <figure><artwork>
    To: "Joe &lt;joe@example.com&gt;
				    </artwork></figure> </t>

				<t> should be interpreted as:
				    <figure><artwork>
    To: "Joe &lt;joe@example.com&gt;"@example.net
				    </artwork></figure> </t>

				<t> where "example.net" is the domain name
				    or host name of the handling agent
				    making the interpretation. </t>
			</section>
		</section>

		<section anchor="non-headers" title="Non-Header Lines">
			<t> It has been observed that some messages contain
			    a line of text in the header that is not a valid
			    message header field of any kind.  For example:

			    <figure><artwork>
    From: user@example.com {1}
    To: userpal@example.net {2}
    Subject: This is your reminder {3}
    about the football game tonight {4}
    Date: Wed, 20 Oct 2010 20:53:35 -0400 {5}

    Don't forget to meet us for the tailgate party! {7}
			    </artwork></figure> </t>

			<t> The cause of this is typically a bug in a message
			    generator of some kind.  Line {4} was intended to
			    be a continuation of line {3}; it should have been
			    indented by whitespace as set out in Section 2.2.3
			    of <xref target="MAIL"/>.  </t>

			<t> This anomaly has varying impacts on processing
			    software, depending on the implementation:

			    <list style="numbers">
				<t> some agents choose to separate the header
				    of the message from the body only at the
				    first empty line (i.e. a CRLF immediately
				    followed by another CRLF); </t>

				<t> some agents assume this anomaly should
				    be interpreted to mean the body starts
				    at line {4}, as the end of the header
				    is assumed by encountering something that
				    is not a valid header field or folded
				    portion thereof; </t>

				<t> some agents assume this should be
				    interpreted as an intended header folding
				    as described above and thus simply
				    append a single space character (ASCII
				    0x20) and the content of line {4} to
				    that of line {3}; </t>

				<t> some agents reject this outright as line
				    {4} is neither a valid header field nor
				    a folded continuation of a header
				    field prior to an empty line. </t>
			    </list></t>

			<t> This can be exploited if it is known that one
			    message handling agent will take one action
			    while the next agent in the handling chain will
			    take another.  Consider, for example, a message
			    filter that searches message headers for properties
			    indicative of abusive of malicious content that is
			    attached to a Mail Transfer Agent (MTA)
			    implementing option 2 above.  An attacker could
			    craft a message that includes this malformation at
			    a position above the property of interest, knowing
			    the MTA will not consider that content part of
			    the header, and thus the MTA will not feed it
			    to the filter, thus avoiding detection.  Meanwhile,
			    the Mail User Agent (MUA) which presents the
			    content to an end user, implements option 1 or 3,
			    which has some undesirable effect. </t>

			<t> It should be noted that a few implementations
			    choose option 4 above since any reputable message
			    generation program will get header folding right,
			    and thus anything so blatant as this malformation
			    is likely an error caused by a malefactor. </t>

			<t> The preferred implementation if option 4 above is
			    not employed is to apply the following heuristic
			    when this malformation is detected:

			    <list style="numbers">
				<t> Search forward for an empty line.  If one
				    is found, then apply option 3 above to the
				    anomalous line, and continue. </t>

				<t> Search forward for another line that
				    appears to be a new header field, i.e.,
				    a name followed by a colon.  If one is
				    found, then apply option 3 above to the
				    anomalous line, and continue. </t>
			    </list> </t>
		</section>

		<section anchor="spacing" title="Unusual Spacing">
			<t> The following message is valid per
			    <xref target="MAIL"/>:

			    <figure><artwork>
    From: user@example.com {1}
    To: userpal@example.net {2}
    Subject: This is your reminder {3}
     {4}
     about the football game tonight {5}
    Date: Wed, 20 Oct 2010 20:53:35 -0400 {6}

    Don't forget to meet us for the tailgate party! {8}
			    </artwork></figure> </t>

			<t> Line {4} contains a single whitespace.  The
			    intended result is that lines {3}, {4}, and {5}
			    comprise a single continued header field.  However,
			    some agents are aggressive at stripping trailing
			    whitespace, which will cause line {4} to be
			    treated as an empty line, and thus the separator
			    line between header and body.  This can affect
			    header-specific processing algorithms as described
			    in the previous section. </t>

			<t> Ideally, this case simply ought not to be
			    generated. </t>

			<t> Message handling agents receiving a message bearing
			    this anomaly MUST behave as if line {4} was
			    not present on the message, and SHOULD emit
			    a version in which line {4} has been removed. </t>
		</section>

		<section anchor="malformations" title="Header Malformations">
			<t> There are various malformations that exist.
			    A common one is insertion of whitespace at
			    unusual locations, such as:

			    <figure><artwork>
    From: user@example.com {1}
    To: userpal@example.net {2}
    Subject: This is your reminder {3}
    MIME-Version : 1.0 {4}
    Content-Type: text/plain {5}
    Date: Wed, 20 Oct 2010 20:53:35 -0400 {6}

    Don't forget to meet us for the tailgate party! {8}
			    </artwork></figure> </t>

			<t> Note the addition of whitespace in line {4}
			    after the header field name but before the colon
			    that separates the name from the value. </t>

			<t> The acceptance grammar of <xref target="MAIL"/>
			    permits that extra whitespace, so it cannot be
			    considered invalid.  However, a consensus of
			    implementations prefers to remove that whitespace.
			    There is no perceived change to the semantics of
			    the header field being altered as the whitespace
			    is itself semantically meaningless.  Thus, a module
			    compliant with this memo MUST remove all whitespace
			    after the field name but before the colon, and
			    MUST emit that version of that field on
			    output. </t>
		</section>

		<section anchor="counts" title="Header Field Counts">
			<t> Section 3.6 of <xref target="MAIL"/> prescribes
			    specific header field counts for a valid
			    message.  Few agents actually enforce these
			    in the sense that a message whose header contents
			    exceed one or more limits set there are generally
			    allowed to pass; they may add any required
			    fields that are missing, however.  </t>

			<t> Also, few agents that use messages as input,
			    including Mail User Agents (MUAs) that actually
			    display messages to users, verify that the input
			    is valid before proceeding.  Two popular open
			    source filtering programs and two popular Mailing
			    List Management (MLM) packages examined at the
			    time this document was written select either the
			    first or last instance of a particular field name,
			    such as From, to decide who sent a message.  Absent
			    enforcement of <xref target="MAIL"/>, an attacker
			    can craft a message with multiple fields if that
			    attacker knows the filter will make a decision
			    based on one but the user will be shown the
			    other. </t>

			<t> This situation is exacerbated when a claim of
			    message validity is inferred by something like
			    a valid <xref target="DKIM"/> signature.  Such
			    a signature might cover one instance of a
			    constrained field but not another, and a naive
			    consumer of DKIM's output, not realizing which
			    one was covered by a valid signature, could presume
			    the wrong one was the "good" one.  An MUA, for
			    example could show the first of two From fields
			    as "good" or "safe" while the DKIM signature
			    actually only verified the second. </t>

			<t> Thus, an agent compliant with this specification
			    MUST enact one of the following:

			    <list style="numbers">
				<t> reject outright or refuse to process
				    further any input message that does not
				    conform to Section 3.6 of
				    <xref target="MAIL"/>; </t>

				<t> remove or, in the case of an MUA, refuse
				    to render any instances of a header field
				    whose presence exceeds a limit prescribed
				    in Section 3.6 of
				    <xref target="MAIL"/> when generating its
				    output; </t>

				<t> alter the name of any header field 
				    whose presence exceeds a limit prescribed
				    in Section 3.6 of
				    <xref target="MAIL"/> when generating its
				    output so that later agents can produce a
				    consistent result.  Any alteration likely
				    to cause the field to be ignored by
				    downstream agents is acceptable.  A common
				    approach is to prefix the field names
				    with a string such as "BAD-". </t>
			    </list> </t>
		</section>

		<section anchor="missing" title="Missing Header Fields">
			<t> Similar to the previous section, there are
			    messages seen in the wild that lack certain
			    required header fields.  For example,
			    <xref target="MAIL"/> requires that a To field
			    be present in all messages.  When presented with
			    a message lacking a To field, some MTAs might do
			    one of the following:

			    <list style="numbers">
				<t> Make no changes </t>

				<t> Add a To field with a neutral value,
				    such as "undisclosed-recipients:;" </t>

				<t> Add a non-standard header field, such
				    as Apparently-To, that contains the list
				    of <xref target="SMTP"/> recipients </t>

				<t> Add a To field that contains the list
				    of <xref target="SMTP"/> recipients </t>
			    </list> </t>

			<t> Options 3 and 4 above risk exposing private
			    information, such as blind carbon copy (Bcc)
			    recipients.  Further, option 3 still leaves the
			    message in a non-compliant state. </t>

			<t> Option 2 is RECOMMENDED for handling this
			    case. </t>

			<t> Other missing field anomalies include the absence
			    of fields that are required, most notably Date and 
			    From.  Handling agents SHOULD add these for
			    internal hanlding if they are missing, but MUST
			    NOT add them to the external representation. 
			    The synthesized fields SHOULD contain a best
			    guess as to what should have been there; for From,
			    the SMTP MAIL command's address can be used
			    (if not null) or a placeholder address followed
			    by an address literal (e.g., unknown@[192.0.2.1]);
			    for Date, a date extracted from a Received field
			    is a reasonable choice. </t>
		</section>

		<section anchor="8bit" title="Eight-Bit Data">
			<t> Standards-compliant mail messages do not contain
			    any non-ASCII data without indicating that
			    such content is present by means of published
			    <xref target="SMTP"/> extensions.  Absent that,
			    <xref target="MIME"/> encodings are typically used
			    to convert non-ASCII data to ASCII in a way that
			    can be reversed by other handling agents or end
			    users. </t>

			<t> Non-ASCII data otherwise found in messages
			    can confound code that is used to analyze content.
			    For example, a null (ASCII 0x00) byte inside
			    a message can cause typical string processing
			    functions to mis-identify the end of a string,
			    which can be exploited to hide malicious content
			    from analysis processes. </t>

			<t> Handling agents MUST reject messages containing
			    null bytes that are not encoded in some standard
			    way, and SHOULD reject other non-ASCII bytes that
			    are similarly not encoded.  If rejection is not
			    done, an ASCII-compatible encoding such as those
			    defined in <xref target="MIME"/> SHOULD be
			    used. </t>
		</section>
	</section>

	<section anchor="mime" title="MIME Anomalies">
		<t> <xref target="MIME"/>, et seq, define a mechanism of
		    message extensions for providing text in character sets
		    other than ASCII, non-text attachments to messages,
		    multi-part message bodies, and similar facilities. </t>

		<t> Some anomalies with MIME-compliant generation are also
		    common.  This section discusses some of those and
		    presents preferred mitigations. </t>

		<section anchor="hdrnames" title="Header Field Names">
			<t> <xref target="MAIL"/> permits header field names
			    to begin with "--".  This means that a header
			    field name can look like a <xref target="MIME"/>
			    multipart boundary.  For example:

			    <figure><artwork>
  --foo:bar
			    </artwork></figure> </t>

			<t> This is a legal header field, whose name is
			    "--foo" and whose value is "bar".  Thus, consider
			    this header:

			    <figure><artwork>
    From: user@example.com {1}
    To: userpal@example.net {2}
    Subject: This is your reminder {3}
    Date: Wed, 20 Oct 2010 20:53:35 -0400 {4}
    MIME-Version: 1.0 {5}
    Content-Type: multipart/mixed; boundary="foo:bar" {6}
    --foo:bar {7}
    Malicious-Content: muahaha {8}
			    </artwork></figure> </t>

			<t> One implementation could observe that line {7}
			    announces the beginning of the first MIME part
			    while another considers it a part of the message's
			    header. </t>

			<t> If rejection of such messages cannot be done,
			    agents MUST treat line {7} as part of the
			    message's header block and not a MIME
			    boundary. </t>
		</section>

		<section anchor="no_version" title="Missing MIME-Version Field">
			<t> Any message that uses <xref target="MIME"/>
			    constructs is required to have a MIME-Version
			    header field.  Without them, the Content-Type
			    and associated fields have no semantic
			    meaning. </t>

			<t> It is often observed that a message has complete
			    MIME structure, yet lacks this header field. </t>

			<t> As described at the end of
			    <xref target="non-headers"/>, this is not expected
			    from a reputable content generator and is often
			    an indication of mass-produced spam or other
			    undesirable messages. </t>

			<t> Therefore, an agent compliant with this
			    specification MUST internally enact one or more of
			    the following in the absence of a MIME-Version
			    header field:

			    <list style="numbers">
				<t> Ignore all other MIME-specific fields,
				    even if they are syntactically valid,
				    thus treating the entire message as a
				    single-part message of type
				    text/plain; </t>

				<t> Remove all other MIME-specific fields,
				    even if they are syntactically valid,
				    both internally and when emitting the
				    output version of the message; </t>
			    </list> </t>
		</section>
	</section>

	<section anchor="body" title="Body Anomalies">
		<section anchor="longlines" title="Oversized Lines">
			<t> A message containing a line of content that
			    exceeds 998 characters plus the line terminator
			    (1000 total) violates Section 2.1.1 of
			    <xref target="MAIL"/>.  Some handling
			    agents may not look at content in a single line
			    past the first 998 bytes, providing bad actors
			    an opportunity to hide malicious content. </t>

			<t> There is no specified way to handle such messages,
			    other than to observe that they are non-compliant
			    and reject them, or rewrite the oversized line
			    such that the message is compliant. </t>

			<t> Handling agents MUST take one of the following
			    actions:

			    <list style="numbers">
				<t> Break such lines into multiple lines at
				    a position that does not change the
				    semantics of the text being thus altered.
				    For example, breaking an oversized line
				    such that a <xref target="URI"/> then
				    spans two lines could inhibit the proper
				    identification of that URI. </t>

				<t> Rewrite the MIME part (or the entire
				    message if not MIME) that contains the
				    excessively long line using a content
				    encoding that breaks the line in the
				    transmission but would still result in
				    the line being intact on decoding for
				    presentation to the user.  Both of the
				    encodings declared in <xref target="MIME"/>
				    can accomplish this. </t>
			    </list> </t>
		</section>
	</section>

	<section anchor="security" title="Security Considerations">
		<t> The discussions of the anomalies above and their
		    prescribed solutions are themselves security
		    considerations.  The practises enumerated in this memo
		    are generally perceived as attempts to resolve security
		    considerations that already exist rather than introducing
		    new ones. </t>
	</section>

	<section anchor="iana" title="IANA Considerations">
		<t> This memo contains no actions for IANA. </t>

		<t> [RFC Editor: Please remove this section prior to
		    publication.] </t>
	</section>
</middle>

<back>
	<references title="Normative References">
		<reference anchor="KEYWORDS">
			<front>
				<title abbrev="RFC Key Words">Key words for
				       use in RFCs to Indicate Requirement
				       Levels</title>

				<author initials="S." surname="Bradner"
				        fullname="Scott Bradner">
					<organization>Harvard University</organization>
					<address>
						<postal>
							<street>1350 Mass. Ave.</street>
							<street>Cambridge</street>
							<street>MA 02138</street>
						</postal>
						<phone>- +1 617 495 3864</phone>
						<email>sob@harvard.edu</email>
					</address>
				</author>

				<date year="1997" month="March"/>

				<area>General</area>
				<keyword>keyword</keyword>

				<abstract>
					<t> In many standards track documents
					    several words are used to signify
					    the requirements in the
					    specification.  These words are
					    often capitalized.  This document
					    defines these words as they
					    should be interpreted in IETF
					    documents.  Authors who follow
					    these guidelines should
					    incorporate this phrase near the
					    beginning of their document:

					<list> <t>
						The key words "MUST", "MUST
					        NOT", "REQUIRED", "SHALL",
					        "SHALL NOT", "SHOULD", "SHOULD
					        NOT", "RECOMMENDED",  "MAY",
					        and "OPTIONAL" in this
					        document are to be interpreted
					        as described in RFC 2119.
					        </t> </list> </t>

					<t> Note that the force of these
					    words is modified by the
					    requirement level of the document
					    in which they are used. </t>
				</abstract>
			</front>

			<seriesInfo name="BCP" value="14"/>
			<seriesInfo name="RFC" value="2119"/>
			<format type="TXT" octets="4723"
			        target="ftp://ftp.isi.edu/in-notes/rfc2119.txt"/>
			<format type="HTML" octets="17491"
			        target="http://xml.resource.org/public/rfc/html/rfc2119.html"/>
			<format type="XML" octets="5777"
			        target="http://xml.resource.org/public/rfc/xml/rfc2119.xml"/>
		</reference>

		<reference anchor="MAIL">
			<front>
				<title> Internet Message Format </title>
				<author initials="P." surname="Resnick"
					fullname="P. Resnick (editor)">
					<organization>
						Qualcomm, Inc.
					</organization>
				</author>
				<date month="October" year="2008" />
			</front>
			<seriesInfo name="RFC" value="5322" />
		</reference>
	</references>

	<references title="Informative References">
		<reference anchor="DKIM">
			<front>
				<title>
					DomainKeys Identified Mail (DKIM)
					Signatures
				</title>

				<author initials="E." surname="Allman"
				        fullname="E. Allman">
					<organization/>
				</author>

				<author initials="J." surname="Callas"
				        fullname="J. Callas">
					<organization/>
				</author>

				<author initials="M." surname="Delany"
				        fullname="M. Delany">
					<organization/>
				</author>

				<author initials="M." surname="Libbey"
				        fullname="M. Libbey">
					<organization/>
				</author>

				<author initials="J." surname="Fenton"
				        fullname="J. Fenton">
					<organization/>
				</author>

				<author initials="M." surname="Thomas"
				        fullname="M. Thomas">
					<organization/>
				</author>

				<date year="2007" month="May"/>

				<abstract>
					<t> DomainKeys Identified Mail (DKIM)
					    defines a domain-level
					    authentication framework for email
					    using public-key cryptography and
					    key server technology to permit
					    verification of the source and
					    contents of messages by either
					    Mail Transfer Agents (MTAs) or
					    Mail User Agents (MUAs).  The
					    ultimate goal of this framework is
					    to permit a signing domain to
					    assert responsibility for a
					    message, thus protecting message
					    signer identity and the integrity
					    of the messages they convey while
					    retaining the functionality of
					    Internet email as it is known
					    today.  Protection of email
					    identity may assist in the global
					    control of "spam" and "phishing".
					    [STANDARDS TRACK] </t>
				</abstract>
			</front>

			<seriesInfo name="RFC" value="4871"/>

			<format type="TXT" octets="166054"
			        target="ftp://ftp.isi.edu/in-notes/rfc4871.txt"/>
		</reference>

		<reference anchor="DSN">
			<front>
				<title> An Extensible Message Format for
				        Delivery Status Notifications </title>
				<author initials="K." surname="Moore"
					fullname="K. Moore">
					<organization>
						University of Tennessee
					</organization>
				</author>
				<author initials="G." surname="Vaudreuil"
					fullname="G. Vaudreuil">
					<organization>
						Lucent Technologies
					</organization>
				</author>
				<date month="January" year="2003" />
			</front>
			<seriesInfo name="RFC" value="3464" />
		</reference>

		<reference anchor="EMAIL-ARCH">
			<front>
				<title> Internet Mail Architecture </title>
				<author initials="D." surname="Crocker"
				        fullname="D. Crocker">
					<organization>
						Brandenburg InternetWorking
					</organization>
				</author>
				<date month="July" year="2009" />
			</front>
			<seriesInfo name="RFC" value="5598" />
		</reference>

		<reference anchor="MIME">
			<front>
				<title> Multipurpose Internet Mail
				        Extensions (MIME) Part One: Format of
				        Internet Message Bodies </title>
				<author initials="N." surname="Freed"
					fullname="N. Freed">
					<organization>
						Innosoft
					</organization>
				</author>
				<author initials="N." surname="Borenstein"
					fullname="N. Borenstein">
					<organization>
						First Virtual
					</organization>
				</author>
				<date month="November" year="1996" />
			</front>
			<seriesInfo name="RFC" value="2045" />
		</reference>

		<reference anchor="RFC822">
			<front>
				<title> Standard for the Format of Internet
				        Text Messages  </title>
				<author initials="D. H." surname="Crocker"
				        fullname="D. H. Crocker">
					<organization>
						University of Delaware
					</organization>
				</author>
				<date month="August" year="1982" />
			</front>
			<seriesInfo name="RFC" value="822" />
		</reference>

		<reference anchor="SMTP">
			<front>
				<title>Simple Mail Transfer Protocol</title>

				<author
					fullname="J. Klensin"
					initials="J."
					surname="Klensin">
					<organization></organization>
				</author>

				<date month="October" year="2008"></date>
			</front>

			<seriesInfo name="RFC" value="5321"></seriesInfo>
		</reference>

		<reference anchor="URI">
			<front>
				<title> Uniform Resource Identifier (URI):
					Generic Syntax </title>
				<author initials="T." surname="Berners-Lee"
					fullname="T. Berners-Lee">
					<organization>
						W3C/MIT
					</organization>
				</author>
				<author initials="R." surname="Fielding"
					fullname="R. Fielding">
					<organization>
						Day Software
					</organization>
				</author>
				<author initials="L." surname="Masinter"
					fullname="L. Masinter">
					<organization>
						Adobe Systems
					</organization>
				</author>
				<date month="January" year="2005"/>
			</front>
			<seriesInfo name="RFC" value="3986" />
		</reference>
	</references>

	<section anchor="thanks" title="Acknowledgements">
   		<t> The author wishes to acknowledge the following for their
		    review and constructive criticism of this proposal:
		    Tony Hansen, and
		    Gregory Shapiro
                    </t>
	</section>

</back>

</rfc>
