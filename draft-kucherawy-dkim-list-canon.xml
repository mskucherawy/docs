<?xml version="1.0" encoding="us-ascii"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY RFC2045 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2045.xml">
  <!ENTITY RFC5598 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5598.xml">
  <!ENTITY RFC6376 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6376.xml">
  <!ENTITY RFC6377 PUBLIC "" "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6377.xml">
]>

<rfc ipr="trust200902" category="exp"
        docName="draft-kucherawy-dkim-list-canon-00">

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc strict="no" ?>
<?rfc rfcedstyle="yes"?>
<?rfc subcompact="no"?>

<front>
	<title abbrev="DKIM List Canonicalization">
		A List-safe Canonicalization for
		DomainKeys Identified Mail (DKIM)
	</title>

	<author fullname="N. Freed"
		initials="N." surname="Freed">
		<organization/>

		<address>
			<email>ned+ietf@mrochek.com</email>
		</address>
	</author>

	<author initials="M. S." surname="Kucherawy"
	        fullname="Murray S. Kucherawy">

		<address>
			<email>superuser@gmail.com</email>
		</address>
	</author>

	<date year="2014"/>

	<area>Applications</area>

	<abstract>
		<t> DomainKeys Identified Mail (DKIM) introduced a mechanism
		    whereby a mail operator can affix a signature to a message
		    that validates at the level of the signer's domain name.
		    It specified two possible ways of converting the message
		    body to a canonical form, one intolerant of changes and
		    the other tolerant of simple changes to whitespace within
		    the message body. </t>

		<t> The provided canonicalization schemes do not tolerate
		    changes in a structured message such as conversion
		    between transfer encodings or addition of new message
		    parts.  It is useful to have these capabilities to allow
		    for transport through gateways, and also for transport
		    through handlers (such as mailing list services) that might
		    add content that would invalidate a signature generated
		    using the existing canonicalization schemes. </t>

		<t> This document presents a mechanism for generating
		    a canonicalization that can allows easy detection of
		    modified content while still being valid for the content
		    it originally signed.  It also presents a use profile
		    of DKIM that takes advantage of this capability. </t>
	</abstract>
</front>

<middle>
	<section anchor="background" title="Background">
		<t> DomainKeys Identified Mail <xref target="RFC6376"/> (DKIM)
		    defines a mechanism whereby a verified domain name can be
		    attached to a message, or portion of a message, using a
		    cryptographic signature.  It presents two possible schemes
		    for converting the header block to a canonical form, and
		    similarly two schemes for canonicalizing the body.  In
		    each case, one scheme permits no changes whatsoever,
		    and the other permits limited changes restricted to
		    areas such as whitespace munging, case changing, and header
		    field wrapping. </t>

		<t> Some agents deliberately, but innocently, modify content
		    in transit.  A prime example of this is mailing lists,
		    which might add a prefix to the Subject field of a message,
		    add list-specific information to the header (in the form
		    of new header fields), or append administrivia to the
		    body of messages before they are re-mailed to the list
		    subscribers.  Use of mailing lists with respect to DKIM,
		    and a discussion of related challenges, can be found in
		    <xref target="RFC6377"/>. </t>

		<t> There is a desire to have DKIM signatures survive transit
		    through lists.  One way to do this is to make use of
		    DKIM's "l=" tag which limits the portion of the body
		    that is signed.  This exposes an attack vector, however,
		    since one can simply append any content to a partly-signed
		    message and the signature will continue to verify.  (See
		    Section 8.2 of <xref target="RFC6376"/>.) </t>

		<t> This document defines a new body canonicalization for DKIM
		    that includes a partial signature for each message part
		    in a message structured using Multipurpose Internet Mail
		    Extensions (MIME; see <xref target="RFC2045"/>).  This
		    allows a clear delineation between the author-generated
		    content (which would be signed by the author) and content
		    added downstream (which would be signed by the other
		    actor).  A DKIM verifier can then determine whether the
		    author-generated content is intact, and then identify
		    and verify the content that was added later. </t>

		<t> The utility of this mechanism is predicated on the notion
		    that agents that modify signed messages will do so in
		    ways compatible with MIME. </t>
	</section>

	<section anchor="defs" title="Definitions">
		<t> Numerous terms used here, especially "Author", are 
		    defined in <xref target="RFC5598"/>. </t>
	</section>

	<section anchor="descr"
	         title="The 'list' Canonicalization Description">
		<t> This section defines the 'list' body canonicalization
		    algorithm. </t>

		<t> Put simply, the list canonicalization constructs a hash
		    tree of the MIME structure of the message after each
		    part has been decoded (for those with a
		    Content-Transfer-Encoding field).  The hash used is
		    implied by the signature algorithm to be used (see the
		    DKIM "a=" tag).  Each of the hashes can be made a part of
		    the signature to allow for more precise part
		    validation, and identification of added content. </t>

		<section anchor="descr_trees" title="Preparing Content">
			<t> A message is prepared for canonicalization by
			    applying the following steps in order:

			    <list style="numbers">
				<t> Create an empty tree.  Each node of the
				    tree includes the following components:
				    <list style="letters">
					<t> The MIME type and subtype of the
					    part, expressed as would be found
					    in a Content-Type header field,
					    with no whitespace or
					    comments; </t>

					<t> The unencoded content represented
					    by the MIME part at this node; </t>

					<t> A series of octets that will
					    contain a hash of the content; </t>

					<t> A series of zero or more pointers
					    to other (child) nodes. </t>
				    </list></t>

				<t> If the message is not encoded using MIME,
				    insert a node at the root of the tree
				    using a type/subtype of "text/plain" and
				    the full body content.  The hash is
				    not initialized. </t>

				<t> If the message is encoded using MIME, then
				    the tree is populated in a way that mirrors
				    the MIME structure of the message.  In
				    particular, the outermost MIME object will
				    appear at the root node, and the only
				    nodes that have children are those with
				    a MIME type of "multipart".  The hashes
				    are not initialized. </t>

				<t> For each leaf node, compute a hash of the
				    content of that node.  Store the hash in
				    the node. </t>

				<t> For each non-leaf node, if all of its child
				    nodes now have computed hashes, concatenate
				    the hashes (with order preserved), and
				    compute and store a hash of the
				    concatenation. </t>

				<t> Repeat the previous step until all hashes
				    in the tree have been populated. </t>
			    </list> </t>

			<t> When this canonicalization is in use, the "bh=" tag
			    will contain the hash stored at the root of the
			    tree.  The processes for signing and verification
			    are otherwise unchanged. </t>
		</section>
	</section>
				    
	<section anchor="descr_lh" title="'The 'lh=' Signature Tag">
		<t> A signer can include an "lh=" tag, defined here, to make
		    more than just the root hash information available to
		    verifying agents.  This permits identification of the
		    specific part of the MIME structure that was modified,
		    added or removed by an intermediary. </t>

		<t> The "lh=" tag is constructed by performing an in-order
		    traversal of the canonicalization tree described in
		    <xref target="descr_trees"/>.  At each node, each of the
		    following is output, separated by a colon character
		    (ASCII 0x3A):

		    <list style="numbers">
			<t> A base64 expression of the hash at that node; </t>

			<t> The MIME type of that node; </t>

			<t> An integer expression of the number of children
			    at that node. </t>
		    </list> </t>

		<t> Between each node's output, a comma character (ASCII 0x2C)
		    is output. </t>

		<t> Reconstruction of the MIME tree can be accomplished by
		    the following steps:

		    <list style="numbers">
			<t> Create a tree "T" containing a single empty
			    node.  </t>

			<t> Create an empty node queue, "Q". </t>

			<t> Create an information queue "I", containing the
			    sequence of node information fields found in the
			    "lh=" tag. </t>

			<t> Select the root node of the tree.  Call this node
			    "N". </t>

			<t> Extract the first batch of node information ("B")
			    from the "lh=" tag. </t>

			<t> Store the hash and MIME type from "B" into
			    "N". </t>

			<t> Enqueue the specified number of empty nodes into
			    "Q", and attach them all as children of "N". </t>

			<t> If "I" and "Q" are both empty, terminate.  If
			    one is empty and the other is not, an error
			    has occurred. </t>

			<t> Extract the next batch of node information from
			    "I", as "B". </t>

			<t> Dequeue the next node from "Q", as "N". </t>
		
			<t> Return to step 6. </t>
		    </list> </t>

		<t> By comparing the hashes in and structure of this tree to
		    those in the canonicalized tree, a receiver can identify
		    parts of the tree (or entire subtrees) that have been
		    modified.  Parts not covered by the signature can also
		    be identified. </t>
	</section>

	<section anchor="disc" title="Use Profile">
		<t> The intended use of this mechanism is to affix two DKIM
		    signatures to a message.  The first signature is added by
		    the Author, and canonicalizes the original message in its
		    entirety.  The second signature is added by a modifying
		    intermediary, such as a mailing list manager (MLM). </t>

		<t> When verifying, the Author signature on an unmodified
		    message would pass verification.  For a modified message,
		    in the typical case, the verification step would observe
		    that the Author signature failed but the intermediary's
		    signature verified.  When the "lh=" tag is present, it is
		    possible to reconstruct the MIME structure of the signed
		    message and compare it to that of the received message,
		    including hashes of the content seen by each party.
		    By comparing hash values at each node of the
		    MIME structures, it is possible to determine in which
		    MIME parts changes were made and/or new parts added or
		    removed by the intermediary.  The verifying agent can
		    then determine whether those changes are acceptable before
		    allowing the message to continue toward delivery. </t>
	</section>

	<section anchor="security" title="Security Considerations">
		<section anchor="sec_import" title="Imported from DKIM">
			<t> Section 8 of <xref target="RFC6376"/> discusses
			    numerous security considerations relevant to
			    DKIM.  Of particular interest here is Section
			    8.2, which discusses concerns regarding signatures
			    that sill verify in the presence of added
			    message content. </t>
		</section>

		<section anchor="sec_malware"
		         title="Added Content May Not Be Safe">
			<t> When the use profile described in
			    <xref target="descr"/> is applied, it is important
			    to note that the added content was not signed
			    by the Author domain, but only by the domain
			    of the intermediary.  Operators that might grant
			    preferential handling based on valid DKIM
			    signatures from favorable domains; assuming that
			    appended content in the presence of such signatures
			    does not mean the appended content is necessarily
			    safe. </t>
		</section>
	</section>

	<section anchor="iana" title="IANA Considerations">
		<section anchor="iana_canon"
		         title="DKIM-Signature Canonicalization Body Registry">
			<t> IANA is requested to add the following entry to the
			    DKIM-Signature Canonicalization Body Registry:
			<figure><artwork>
  Type: list
  Reference: [this document]
  Status: active
			</artwork></figure></t>
		</section>

		<section anchor="iana_tag"
		         title="DKIM-Signature Tag Specifications Registry">
			<t> IANA is requested to add the following entry to the
			    DKIM-Signature Tag Specifications Registry:
			<figure><artwork>
  Type: lh
  Reference: [this document]
  Status: active
			</artwork></figure></t>
		</section>
	</section>
</middle>

<back>
	<references title="Normative References">
		&RFC2045;
		&RFC6376;
	</references>

	<references title="Informative References">
		&RFC5598;
		&RFC6377;
	</references>

	<section anchor="examples" title="Examples">
		<t> TODO: Show a few examples of the conversion between
		    some different MIME structures, the hash tree, and the
		    "lh=" tag's value. </t>
	</section>

	<section anchor="thanks" title="Acknowledgements">
		<t> The authors wish to acknowledge
		    (names)
		    for their comments during the development of this
		    document. </t>
	</section>
</back>

</rfc>
