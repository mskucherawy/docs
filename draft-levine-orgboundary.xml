<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY rfc1034 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1034.xml">
  <!ENTITY rfc1035 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1035.xml">
  <!ENTITY rfc5234 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5234.xml">
  <!ENTITY rfc5321 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5321.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc toc="yes" ?>
<?rfc tocindent="yes" ?>
<?rfc tocdepth="2" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>

<rfc category="info" docName="draft-levine-orgboundary-01" ipr="trust200902">
  <front>
    <title abbrev="Org Boundaries">
	Publishing Organization Boundaries in the DNS
    </title>

    <author fullname="John Levine" initials="J." surname="Levine">
      <organization>Taughannock Networks</organization>

      <address>
        <postal>
          <street>PO Box 727</street>
          <city>Trumansburg</city>
          <code>14886</code>
          <region>NY</region>
        </postal>
        <phone>+1 831 480 2300</phone>
        <email>standards@taugh.com</email>
        <uri>http://jl.ly</uri>
      </address>
    </author>

    <date month="July" year="2013" />

    <area>Applications</area>

    <keyword>DNS</keyword>
    <keyword>cookies</keyword>
    <keyword>e-mail</keyword>

    <abstract>
      <t>Often, the organization that manages a subtree in the DNS is different
         from the one that manages the tree above it.  Rather than describing a
         particular design, we describe an architecture to publish in the DNS
         the boundaries between organizations that can be adapted to various
         policy models.</t>
    </abstract>
  </front>

  <middle>
     <section title="Introduction">
	<t>Often, the organization that manages a subtree in the DNS is
           different from the one that manages the tree above it.
	   Many applications use information about such boundaries to
           implement security policies.  For example, web browsers use them
           to limit the names where web cookies can be set, and
	   Secure Socket Layer (SSL) certificate services use them to determine
           the party responsible for the domain in a signing request.
	   Some mail security applications such as Domain-based Messaging
           Authetnication, Reporting and Conformance (DMARC) use them to locate
           an organization's policy records in the DNS.  </t>

	<t>The most widely used source of boundary data is the Public Suffix List,
           maintained by the Mozilla Foundation.
	   It is distributed as a text file available at a well known location,
           with some libraries available to parse and search it.
	   While it has worked adequately, it has a variety of issues:
		<list style="numbers">
	   		<t> Processing the file is relatively slow, so adequate
			    performance requires that each
	   		    application cache a copy of the file. </t>

			<t> The file is in a unique format that requires a
 			    specialized parser and lookup routines. </t>

			<t> The file is managed by a third party rather than
 			    directly by the domain owners, meaning the likelihood
			    of stale data is a concern. </t>
		</list> </t>
     </section>

     <section title="Design Issues">
	<t>Organization boundaries can be assigned on what one could
	   call an opt-in or opt-out basis. "Opt-in" means that two names are only
	   managed by the same organization if both actively assert that they are
	   related.  "Opt-out" means that if there is any boundary information at
           all for a DNS subtree, each name is assumed to be under the same
           management as its parent unless there is a boundary assertion to the
           contrary.  This design describes an opt-out model.</t>
	   
	<t>Within the opt-out model, this design can adapt to a variety of
           requirements.:
		<list style="symbols">
			<t>Policies can be published by the domains themselves,
			    or by a third party.  In the former case, each domain
			    might assert its own boundary policies.  In the latter
			    case, the third party makes the assertions, which may
			    or may not agree with what the domains themselves
 			    would want.</t>

			<t>Multiple levels of delegation may be implemented,
			    which is different from irregular boundaries.  For
			    example, "ca", "on.ca", and "toronto.on.ca" are
			    irregular boundaries, because they're all handled by
			    the Canadian Internet Registration Authority (CIRA).
			    CentralNIC's "uk.com" would be a second level of
			    delegation below Verisign's com.  </t>

			<t>Different sets of boundary rules can be published for
			    different applications.  For example, the boundaries
			    for SSL certificates might be different from the
			    boundaries for e-mail policies, or for web cookie
			    setting policies.</t>
		</list> </t>

	<t>In the lookup process below, the boundary point data is stored in TXT
	   records.  While it wouldn't be harmful to use a new RRTYPE, it would
	   also provide little benefit: All of the DNS names used include a
           distinctive prefixed name component, so there should not be
	   any resource records at those names other than the TXT record for the
           boundary.  To avoid confusion due to top-level wildcard records that
           might inadvertently cover the subtree of boundary records, the TXT
           strings contain a prefix tag.  </t>
     </section>

     <section title="Lookup Process">
        <t>The DNS protocol is defined in <xref target="RFC1034"/> and
           <xref target="RFC1035"/>.  The query is for RRTYPE 15 (TXT). </t>

	<t>Each collection of boundary data has a "base name" and a
           "prefix tag". </t>

        <t>The base name is a location in the DNS tree where the organizational
           boundary data is rooted.  In particular, the "official" boundary data
           has a base name of "." (the DNS root), while using some other base name
           implies the owner of the base name is the party making organizational
           boundary assertions. </t>

        <t>The prefix tag is the string "_ob" and is intended to be unique.
	   If there are different kinds of boundary data, the tag can be further
           prefixed, e.g., "_cookie._ob" for conventional HTTP cookies, or
	   "_dmarc._ob" for organizational boundaries intended to be used only
           within the context of the DMARC protocol.  [TBD: Add a DMARC
           reference.].  </t>

	<t>A valid policy record starts with a fixed string "ob=1 ", meaning
           organization boundary version 1.  If a lookup returns no TXT records
           that start with this string, or more than one record that starts with
           the string, the lookup fails.  </t>

	<t>In general, the lookup process takes as input a domain name and returns
           the name of the node in the DNS closest to the root that also belongs
           to the same organization.  This may be the domain itself or a parent.
	   If there is no policy for the domain the lookup fails; there are no
           defaults, and the DNS root is not within any organization boundary.
	   (Applications may apply defaults of their own, but that is beyond the
           scope of this specification.) </t>

	<t>For the first lookup, the client extracts the top level component
           (i.e., the rightmost label, as "label" is defined in Section 3 of
           <xref target="RFC1034"/>))
           of the domain name from the subcomponents, if any, and inserts the
           prefix in front of that component.
	   For example, if the domain to be checked is "example.com" or
           "www.example.com", the client issues a DNS query for "_ob.com". If
           the domain is simply "example", the client looks up "_ob.example".
	   If the base name is not null, it is appended to the name to be looked
           up, so if the name "example.com" were to be checked in a collection
           with the base name "cookies.example", the full queried name would be
           "_ob.com.cookies.example." </t>

	<t>If a valid policy record is returned, the contents of the record
           after the required prefix string comprise the domain names at or
           just below the policy boundaries.  For example, a check for a boundary
           between "com" and "example.com" would be issued at "_ob.com", and the
           expected response would be "ob=1 com".  If a domain has multiple
           boundaries, the record contains a whitespace-separated list of
	   the boundary points, e.g., "ob=1 ca on.ca toronto.on.ca".  </t>

	<t>If there are no boundaries below the queried point, the policy record
           contains "ob=1 ." indicating the root.  For example, if all subdomains
           of the "example" top-level domain (TLD) are under the same management
           as the TLD itself, checks for "_ob.example" would return "ob=1 .".  </t>

	<t>If the client process only handles a single level of delegation, the
           process stops after a single lookup.  If it allows multiple levels of
           delegation, the client inserts the prefix tag into the name just below
           (i.e., to the left of) the name at the largest matching boundary
           indicated in the lookup result, and repeats the lookup.  For example:
             <list style="symbols">
		<t> When evaluating "www.foo.example.com", the first query
                    would be to "_ob.com".  If the reply to this is "ob=1 com",
                    then the second query would go to "_ob.example.com".   </t>

		<t> When evaluating "www.example.on.ca", the first query would be
                    to "_ob.ca".  If the reply to this is
                    "ob=1 ca on.ca toronto.on.ca", the next lookup would be to
                    "_ob.example.on.ca". </t>
             </list> </t>

        <t>This process repeats until a DNS lookup returns NXDOMAIN (DNS RRCODE 3),
           at which point the result of this algorithm is the domain name that
           last returned a successful query with the first label ("_ob")
           removed. </t>

	<t>The total number of DNS lookups is the number of levels of boundary
	   delegation, which is unlikely to be more than 1 or 2 in most realistic
           scenarios.  </t>
     </section>

     <section title="Record Syntax">
       <t> Expressed in ABNF (<xref target="RFC5234"/>), the syntax of a reply is
           as follows:

		<figure><artwork>
  ob-reply = "_ob=1" 1*( 1*WS Domain )
		</artwork> </figure> </t>

       <t> "Domain" is defined in Section 4.1.2 of <xref target="RFC5321"/>. </t>

       <t> Where a reply comprises multiple character-strings (see Section 3.3.14
           of <xref target="RFC1035"/>), the client MUST concatenate them
           all together in order prior to interpretation, with no intervening
           spaces added. </t>
     </section>

     <section title="DNS Records">
	<t>The publishing entity uses prefixed names that parallel the regular
           names under a TLD to cover the relevant name space.</t>

     <t>If there is a boundary below a given name, an entry in the TLD record
        covers the names below it.  For example, if there is a boundary
        immediately below ".TEST", a suitable record would be:

     <figure><artwork>
  _ob.test IN TXT "ob=1 test"</artwork>
     </figure> </t>

     <t> If the boundary is at the TEST domain, i.e., TEST is under the same
         management as FOO.TEST, the record would indicate no boundaries:

	   <figure><artwork>
  _ob.test txt "ob=1 ."</artwork>
	   </figure> </t>

      <t> In domains with irregular policy boundaries, multiple strings in the
          record describe the boundary points.  For example, in the CA (Canada)
          TLD, for national organizations there might be a boundary directly
	  below the national TLD; for provincial organizations there might be
          a boundary below a provincial subdomain such as "on.ca"; and for local
          (e.g., municipal) organizations, a boundary below a municipal subdomain
          such as "toronto.on.ca" might exist.  A suitable list of names covers
          this structure.  Where there is such a list in the rpely, the boundary
          is the longest in the returned set of strings that matches a set of
          labels in the domain name being queried.  </t>

      <t> For any set of policy boundaries in a tree of DNS names,
	 a suitable set of policy records can describe the boundaries,
	 so a client can find the boundary for any name in the tree with a
         single policy lookup per level of delegation.  </t>

      <t> Since the delegation structure is unlikely to change with any
          frequency, very long time-to-live (TTL) values in the organizational
          boundary records are advised.  Clients may even enforce their own
          minima for caching these records.</t>
     </section>

     <section title="Discussion">
      <t>Some domains have very irregular boundaries.
	 For example, the CA domain has boundaries for thirteen provinces and
         a large number of  municipalities, so the record for "_ob.ca" would be
         quite long, probably requiring a fallback to TCP for clients that don't
         support EDNS0. [TBD: reference]
	 While it would be possible to break the record up into smaller pieces
         that fit in 512 bytes and reassemble them, this would introduce
         substantial complexity and a large number of queries, and would likely
         be slower than a short TCP session.  </t>

	 <t>The record format described above uses spaces and dots as reserved
         characters to
	 indicate the boundaries between names and between name components.
	 This is adequate if policies only apply to host names, but if becomes
         important to allow arbitrary names, it would be easy to encode them in
         TXT records.  Keeping in mind that a TXT record contains a sequence of
         strings, each preceded by a count byte, each component of the name is
         represented as a string, and the boundary between names is represented
         by a zero-length string.  So the record above would be
	 represented as:
	   <figure><artwork>
  _ob.ca IN TXT "ob=1" "ca" "" "on" "ca" "" "toronto" "on" "ca"</artwork>
	   </figure> </t>
     </section>

     <section title="Security Considerations">
	<t>The purpose of publishing organization boundaries is to provide
           advice to third parties that wish to know whether two names are
           managed by the same organization, allowing those names to 
	   be treated "as the same" in some sense.  Clients that rely on
           published boundaries are outsourcing some part of their own
	   security policy to the publisher, so their own security depends on
           the publisher's boundaries being accurate.  </t>

	<t>Although in some sense domains are always in control of their
           subdomains, there are many situations in which parent domains are
           not expected to influence subdomains.  For example,
	   the Internet Corporation for Assigned Names and Numers (ICANN)
           contracted global TLDs (gTLDs) and registers second level domains.
	   Since there is no technical bar to a parent publishing records
           that shadow part or all of the boundary record namespace for
           delegated subdomains, correct operation depends on
	   the parent and subdomains agreeing about who publishes what.  </t>
     </section>
     
  </middle>

  <back>
    <references title="Normative References">
      &rfc1034;
      &rfc1035;
      &rfc5234;
      &rfc5321;
     </references>

     <section title="Change Log">
	<t><spanx style="strong">NOTE TO RFC EDITOR: This section may be removed
	   upon publication of this document as an RFC.</spanx></t>
	
	<section title="Changes from -01 to -02">
	   <t>Add ABNF.</t>
	   <t>MSK overhaul of the middle part.</t>
	</section>

	<section title="Changes from -00 to -01">
	   <t>Take out wildcards and put everything in one record.</t>
	   <t>Add DNS nits.</t>
	</section>
     </section>
  </back>
</rfc>
